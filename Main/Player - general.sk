options:
	debug: false
	
	prefix: <gold>[&aFeudalism<gold>]<r>
	debugPrefix: <gold>[<yellow>Debug<gold>]<r>
	
	warn: <gold>[<yellow>WARNING<gold>]:<r>
	err: <gold>[<light red>ERROR<gold>]:<r> #User error (like wrong argument)
	err2: <gold>[<red>ERROR<gold>]:<light red> #Critical error
	
#Commands
command /resetPlayer <offline player> [<text="help">]:
	usage: /resetPlayer <player> [<hacker|reboot|requested>]
	trigger:
		if {feu.permission.%uuid of player%} is not "feu.admin" or "feu.op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%uuid of player%} does not exist:
			message "{@err2} You need to have a permission."
			log "%executor%'s permission is wrong (%{feu.permission.%uuid of player%}%)" to "players.log"
			set {feu.permission.%uuid of player%} to "feu.player"
			stop
			
		if arg-2 or arg-1 is "help":
			message "Correct usage: /resetPlayer <player> [<hacker|reset|requested>]"
			stop
		else if arg-2 is "hacker" or "h":
			log "%arg-1% is reset because of hacking. Executor: %executor%" to "reset.log"
			if arg-1 is online:
				message "{@prefix} <light red>You will be reset because of <red>hacking<light red>!" to arg-1
				message "{@prefix} <light red>If you think this is a mistake apply for a pardon here:<gold> ""need-link.now""" to arg-1
				#TODO Get a link
				message "{@prefix} <light red>Because of this you will be kicked in 30 seconds." to arg-1
				add arg-1 to {feu.resetPlayer::*}
				wait 30 seconds
				kick arg-1 because of "<red>Kicked and reset because of hacking."
				stop
		else if arg-2 or arg-1 is "reboot":
			if executor is console:
				broadcast "{@prefix} Every player will be reset, we are sorry for the inconvenience."
				wait 10 seconds
				kick all players because of "{@prefix} Every player will be reset, we are sorry for the inconvenience."
				#loop {feu.allplayers::*}:
				#	add loop-player to {feu.resetPlayer::*}
			else:
				message "{@err} You cannot reset the server via a player, use the console!"
			stop
		else if arg-2 is "request" or "requested" or "r":
			log "%arg-1% is reset because (s)he requested it. Executor: %executor%" to "reset.log"
			if arg-1 is online:
				message "{@prefix} Your application for reset has been approved! Please relog for the changes to take effect." to arg-1
		else:
			message "{@err} Wrong arguments!"
			execute player command "resetPlayer"
			stop
			
		add arg-1 to {feu.resetPlayer::*}
		
command /fullyClear <player> [<text>]:
	usage: /fc player 
	aliases: fc
	trigger:
		if {feu.permission.%uuid of player%} is not "feu.admin" or "feu.op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%uuid of player%} does not exist:
			message "{@err2} You need to have a permission"
			log "%executor%'s permission is wrong (%{feu.permission.%uuid of player%}%)" to "players.log"
			set {feu.permission.%uuid of player%} to "feu.player"
			stop
			
		execute console command "clear %arg-1%"
		set the helmet slot of arg-1 to air
		set the chestplate slot of arg-1 to air
		set the legs slot of arg-1 to air
		set the boots slot of arg-1 to air
		set rf maximum health of arg-1 to 20
		if "%arg-2%" is not "Silent":
			message "{@prefix} Done!"
			
command /setup <player>:
	aliases: su
	executable by: console
	trigger:
		#make sure the arg-1 is really reset
		{@debug} is false:
			deop the arg-1 
		set gamemode of arg-1 to adventure
		execute console command "fc %arg-1% Silent" #fully clear
		set {feu.permission.%uuid of arg-1%} to "feu.player"
		set {feu.godMode.%uuid of arg-1%} to false
		
		#Level stuff
		set {feu.level.%uuid of arg-1%} to 1
		set arg-1's level to 1
		set level progress of the arg-1 to 0
		set {feu.maxXP.%uuid of arg-1%} to 80
		set {feu.currXP.%uuid of arg-1%} to 0
		set {feu.oldMaxXP.%uuid of arg-1%} to 0
		set {feu.XPtoNextLevel.%uuid of arg-1%} to {feu.maxXP.%uuid of arg-1%}
		
		#Quest
		execute console command "quest starter %arg-1% true true"
		execute console command "quest Crazy_house %arg-1% false true"
		execute console command "quest theThird %arg-1% false true"
		
		#health
		set max health of arg-1 to 30
		set arg-1's scaled health to 3
		#wait a tick
		heal the arg-1
		
		#Other
		teleport arg-1 to {feu.mainSpawn}
		execute console command "seespawns false %arg-1% true"
		
#Events
every 30 seconds:
	loop all players in "Feudalism_4":
		loop-player is alive
		health of loop-player is not max health of loop-player
		add 5 to loop-player's health
			
on join:
	loop {feu.resetPlayer::*}:
		if "%name of player%" is equal to "%{feu.resetPlayer::%loop-index%}%":
			remove uuid of player from {feu.allplayers::*}
			set {feu.resetPlayer::%loop-index%} to "%{feu.resetPlayer::%loop-index%}% is reset"
			message "{@prefix} You have now been reset!"
			stop loop
			
	set {_equal} to false
	loop {feu.allplayers::*}:
		if uuid of player is equal to {feu.allplayers::%loop-index%}:
			set {_equal} to true
			set join message to ""
			Message "<light green>Welcome back %player%" to player
			if {feu.permission.%uuid of player%} is not "feu.player":
				if {feu.version} contains "STABLE":
					message "<gold>Current version: <green>%{feu.version}%"
				else if {feu.version} contains "DEVELOP":
					message "<gold>Current version: <yellow>%{feu.version}%"
				else if {feu.version} contains "UNCERTAIN":
					message "<gold>Current version: <red>%{feu.version}%"
				else:
					message "<gold>Current version: <light gray>%{feu.version}%"
				if {feu.permission.%uuid of player%} is "feu.op":
					set {_perm} to "feu.op"
				else if {feu.permission.%uuid of player%} is "feu.admin":
					set {_perm} to "Administrator"
				else if {feu.permission.%uuid of player%} is "feu.tech":
					set {_perm} to "Technician"
				else if {feu.permission.%uuid of player%} is "feu.mod":
					set {_perm} to "Moderator"
				else:
					set {_perm} to "Unknown"
					set {feu.permission.%uuid of player%} to "feu.player"
				message "<gold>Your current permission level: <light green>%{_perm}%"
			stop loop
			
	if {_equal} is true:
		loop {feu.quest.Crazy_house.bossFighters.logedOff::*}:
			if uuid of player is equal to {feu.quest.Crazy_house.bossFighters.logedOff::%loop-index%}:
				#Teleport arg-1 to {feu.quest.Crazy_house.boss1}
				teleport player to {feu.quest.Crazy_house.boss1}
				wait 1 tick
				remove uuid of player from {feu.quest.Crazy_house.bossFighters.logedOff::*}
				add uuid of player to {feu.quest.Crazy_house.bossFighters::*}
				message "<light red>Lazarus<r>: You will not escape me by logging off!"
				execute console command "spawnBoss lazarus"
			stop loop
			
	else if {_equal} is false:
		set join message to "<magenta>Welcome <b>%name of player%<r><magenta> to Feudalism!"
		add uuid of player to {feu.allplayers::*}
		execute console command "setup %name of player%"
		stop 
		
	execute console command "setmaxhealth %player%"