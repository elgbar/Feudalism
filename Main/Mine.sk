options:
	allowedBlocks: wood, any plank, any glass, any glass pane, crafting table, any door, any button, any stairs, any slabs, any furnace, chest, fence, cobble or torch
	#see last in the "on break" event
	MultiBlocksAir: spruce wood or gravel
	MultiBlocksStone: iron ore, diamond ore or coal ore
	MBIDAir: 13 or 17
	MBIDStone: 15, 16 or 56
on script load:
	set {feu.blockID::*} to 13, 15, 16, 17 and 56
	
on break:
	if block is {@MultiBlocksAir} or {@MultiBlocksStone}:
		#prevents the block from dropping anything
		#removes the block
		set {_place} to the block's location
		set {_block} to the target block
		set {_blockID} to the id of the target block
		#wait 1 tick	
		if {_block} is wood block:
			if player is holding an axe:
				cancel event
				set block to air
				data of {_block} isn't 0:
					set {feu.data.%{_place}%} to data of {_block}
			else:
				cancel event
				message "<red>Use an axe on trees!"
				stop
		else if {_block} is ore:
			if player is holding an pickaxe:
				cancel event
				
				set block to stone
			else:
				cancel event
				message "<red>Use a pickaxe on ores!"
				stop
		else if block is gravel:
			if player is holding a shovel:
				cancel event
				
				set block to air
			else:
				cancel event
				message "<red>Use a shovel on gravel!"
				stop
		set {feu.timer.%{_blockID}%.%{_place}%} to now
		add the block's location to {feu.coord.%{_blockID}%::*}
		if {_block} is coal ore:
			give coal to the player
		else if {_block} is gravel:
			if {feu.chance.%{_blockID}%.%player%} doesn't exist:
				set {feu.chance.%{_blockID}%.%player%} to 0
			if {feu.chance.%{_blockID}%.%player%} is 0:
				drop gravel
				message "<red>I have no idea what i'm doing..."
				stop
			else if chance of {feu.chance.%{_blockID}%.%player%}%:#% <-- prevents flooding when using skript language file
				give player cobblestone
			else:
				drop gravel			
		else:
			give {_block} to the player
	else:
		if player doesn't have permission "feu.dig":
		#those with permission can break any block
			if block is cobble stairs or any leaves:
			#denies breaking ^
				cancel event
				stop
			else if block isn't {@allowedBlocks}:
				#allow breaking ^
				cancel event
	
on place:
	if player doesn't have permission "feu.place":
	#those with permission can place any block
		if block isn't {@allowedBlocks}:
		#allow placing ^
			cancel event

every 2 seconds:
	loop {feu.blockID::*}:
		#broadcast "fix spruce wood"
		loop {feu.coord.%loop-value-1%::*}:
			set {_waited} to difference between {feu.timer.%loop-value-1%.%loop-value-2%} and now
			#broadcast "waited: %{_waited}%"
			if {_waited} is greater than 5 real minutes:
				delete {feu.timer.%loop-value-1%.%loop-value-2%}
				if block at loop-value-2 is stone:
					if loop-value-1 is {@MBIDStone}:
						if block at loop-value-2 isn't id of loop-value-1:
							set id of block at loop-value-2 to loop-value-1 
						else:
							log "block at %loop-value-2% is already a block with id %loop-value-1%"
				else if block at loop-value-2 is air:
					if loop-value-1 is 17:
						if  {feu.data.%loop-value-2%} exists:
							set data of block at loop-vaule-2 to {feu.data.%loop-value-2%}
 						else:
							log "Should block at %loop-value-2% be oak wood or is this an error?"
					else if loop-value-1 is 13:
						set block below loop-value-2 to stone
						set block at loop-value-2 to gravel
						wait 2 ticks
						if block below loop-value-2 isn't gravel:
							set block below loop-value-2 to air
					else if loop-value-1 is {@MBIDAir}:
						set id of block at loop-value-2 to loop-value-1 
				remove loop-value-2 from {feu.coord.%loop-value-1%::*}			

on skript stop:
	#This event is called whenever skript is unloaded, on reload or server shutdown.
	#The same happens here as above
	#This is done due to temporary variables are deleted on a server restart or reload
	#If this didn't exist if a block is still in its none mineable form it would stay so forever (unless a admin fixed it)
	#If it does happen admins can use the /fix command
	loop {feu.blockID::*}:
		loop {feu.coord.%loop-value-1%::*}:
			delete {feu.timer.%loop-value-1%.%loop-value-2%}
			if block at loop-value-2 is stone:
				if loop-value-1 is {@MBIDStone}:
					set id of block at loop-value-2 to loop-value-1 
			else if block at loop-value-2 is air:
				if loop-value-1 is 17:
					set block at loop-value-2 to spruce wood
				else if loop-value-1 is {@MBIDAir}:
					set id of block at loop-value-2 to loop-value-1 
			remove loop-value-2 from {feu.coord.%loop-value-1%::*}
	
command /mine <integer> [<player=%player%>]:
	description: set the percent (from 0 to 100) of the mining of gravel
	permission: feu.mine.commands
	trigger:
		if arg-1 is less than 0:
			message "<red>I'm afraid I cannot go that low"
		else if arg-1 is greater than 100:
			message "<red>IT'S OVER 9000(-8900). too high!"
		else:
			set {feu.chance.stone.%arg-2%} to arg-1
			message "<green>%arg-2%'s chance at mining stone from gravel is now:<gold> %arg-1%"
			
options:
	#easier to edit, also taking up less space
	blocks: spruce wood, air, coal ore, iron ore, gravel or diamond ore
	corruptBlocks: stone, spruce wood, coal ore, iron ore, diamond ore, gravel or air
	
		
command /fix <item>:
	permission: feu.fix
	usage: /fix <{@blocks}>
	trigger:
		if arg-1 is {@blocks}:
		#check if the block is correct
			if the block below the player is {@corruptBlocks}:
			#check is the player is standing upon a "corruptBlock"
				set the block below the player to arg-1
			else:
				Message "<red>Cannot fix the block below you!"
				Message "<gold>Valid block to stand on:<red> {@corruptBlocks}"
				#say what's wrong
		else:
			Message "<red>That's not an allowed block to fix!"
			Message "<gold>valid choices: <red>{@blocks}"

on physics:
	block is gravel
	cancel event
	#prevent gravel from falling (doesn't work when placed or spawned (see on mine: gravel"))