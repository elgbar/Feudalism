options:
	allowedBlocks: wood, any plank, any glass, any glass pane, crafting table, any door, any button, any stairs, any slabs, any furnace, chest, fence, cobble or torch
	#see last in the "on break" event
	MultiBlocks: spruce wood, iron ore, diamond ore, gravel or coal ore
on break:
	if block is {@MultiBlocks}:
		#prevents the block from dropping anything
		#removes the block
		set {_place} to the block's location
		set {_block} to the block at {_place}
		set {_blockID} to the id of the block at {_place}
		message "%{_block}%"
		message "%{_blockID}%"
		if {_block} is spruce wood block:
			if player is holding an axe:
				cancel event				
				set block to air
			else:
				cancel event
				message "use an axe on trees!"
				stop
		else if {_block} is ore:
			if player is holding an pickaxe:
				cancel event				
				set block to stone
			else:
				cancel event
				message "use a pickaxe on ores!"
				stop
		else if block is gravel:
			if player is holding a shovel:
				cancel event
				set block to air
			else:
				cancel event
				message "use a shovel on gravel!"
				stop
		set {feu.timer.%{_blockID}%.%{_place}%} to now
		add the block's location to {feu.coord.%{_blockID}%::*}
		#message "%{feu.timer.iron ore.%{_blockID}%}%"
		#message "%{feu.coord.%{_blockID}%::*}%"
		if {_block} is coal ore:
			give coal to the player
		else if {_block} is gravel:
			if {feu.chance.%{_blockID}%.%player%} doesn't exist:
				set {feu.chance.%{_blockID}%.%player%} to 0
			if {feu.chance.%{_blockID}%.%player%} is 0:
				drop gravel
				message "<red>I have no idea what i'm doing..."
				stop
			else if chance of {feu.chance.%{_blockID}%.%player%}%:#% <-- prevents flooding when using skript language file
				give player cobblestone
			else:
				drop gravel			
		else:
			give {_block} to the player
	else:
		if player doesn't have permission "feu.dig":
		#those with permission can break any block
			if block is cobble stairs or any leaves:
			#denies breaking ^
				cancel event
				stop
			else if block isn't {@allowedBlocks}:
				#allow breaking ^
				cancel event

on place:
	if player doesn't have permission "feu.place":
	#those with permission can place any block
		if block isn't {@allowedBlocks}:
		#allow placing ^
			cancel event


every 2 seconds:	
	#broadcast "10 seconds"
	loop {feu.coord.15::*}:
		#loops the mined blcoks
		set {_waited} to difference between {feu.timer.15.%loop-value%} and now
		#set a temp variable to know if it't time to act
		#broadcast "iron: %{_waited}%"
		if {_waited} is greater than 4 real minutes:
			#check if it's time
			delete {_waited}
			delete {feu.timer.15.%loop-value%}
			#delete an unwanted variables
			block at loop-value is stone
			#check if the block is right (so admins can remove the block if they which)
			set block at loop-value to iron ore
			#resets the block back to previous block
			remove loop-value from {feu.coord.15::*}
	loop {feu.coord.16::*}:
		set {_waited} to difference between {feu.timer.16.%loop-value%} and now
		#broadcast "coal: %{_waited}%"
		if {_waited} is greater than 2 real minute:
			delete {_waited}
			delete {feu.timer.16.%loop-value%}
			block at loop-value is stone
			set block at loop-value to coal ore
			remove loop-value from {feu.coord.16::*}
	loop {feu.coord.56::*}:
		set {_waited} to difference between {feu.timer.56.%loop-value%} and now
		#broadcast "diamond: %{_waited}%"
		if {_waited} is greater than 20 real minutes:
			delete {_waited}
			delete {feu.timer.56.%loop-value%}
			block at loop-value is stone
			set block at loop-value to diamond ore
			remove loop-value from {feu.coord.56::*}
	loop {feu.coord.17::*}:
		set {_waited} to difference between {feu.timer.17.%loop-value%} and now
		#broadcast "spruce: %{_waited}%"
		if {_waited} is greater than 5 real minutes:
			delete {_waited}
			delete {feu.timer.17.%loop-value%}
			block at loop-value isn't stone
			set block at loop-value to spruce wood
			remove loop-value from {feu.coord.17::*}
	loop {feu.coord.13::*}:
		set {_waited} to difference between {feu.timer.13.%loop-value%} and now
		#broadcast "stone: %{_waited}%"
		if {_waited} is greater than 2 real minutes:
			delete {_waited}
			delete {feu.timer.13.%loop-value%}
			if block at loop-value isn't stone:
			#^same as always
				if block below loop-value is air:
					#checks if it is necessary to fix the physics bug
					#That being if a gravel block is spawned in air it will fall, making the gravel field smaller and smaller
					set block below loop-value to stone
					#fix the bug by setting a block beneath
					set block at loop-value to gravel
					#actually spawning the block
					wait 2 ticks
					#by doing this the block will stay in air (see at the bottom of the file why)
					if block below loop-value isn't gravel:
						#just to double check if we don't removes a gravel block, safety first!
						set block below loop-value to air
				else:
					set block at loop-value to gravel
			remove loop-value from {feu.coord.13::*}			

on skript stop:
	#This event is called whenever skript is unloaded, on reload or server shutdown.
	#The same happens here as above
	#This is done due to temporary variables are deleted on a server restart or reload
	#If this didn't exist if a block is still in its none mineable form it would stay so forever (unless a admin fixed it)
	#If it does happen admins can use the /fix command
	broadcast "THSI DOESNT WORK! FIX IT!"
	loop {feu.coord.15::*}: #iron ore
		delete {feu.timer.15.%loop-value%}
		block at loop-value is stone
		set block at loop-value to iron ore
		remove loop-value from {feu.coord.15::*}
	#broadcast "%{feu.coord.15::*}%"
	#broadcast "%{feu.timer.iron ore.%loop-value%}%"
	#broadcast "iron reset"
	loop {feu.coord.16::*}:		#coal ore
		delete {feu.timer.16.%loop-value%}
		block at loop-value is stone
		set block at loop-value to coal ore
		remove loop-value from {feu.coord.16::*}
	#broadcast "coal reset"
	loop {feu.coord.56::*}:		#diamond ore
		delete {feu.timer.56.%loop-value%}
		block at loop-value is stone
		set block at loop-value to diamond ore
		remove loop-value from {feu.coord.56::*}
	#broadcast "diamond reset"
	loop {feu.coord.17::*}:		#spruce wood
		delete {feu.timer.17.%loop-value%}
		block at loop-value isn't stone
		set block at loop-value to spruce wood
		remove loop-value from {feu.coord.17::*}	
	#broadcast "spruce reset"
	loop {feu.coord.13::*}:		#gravel
		delete {feu.timer.13.%loop-value%}
		block at loop-value isn't stone
		set block at loop-value to gravel
		remove loop-value from {feu.coord.13::*}
	#broadcast "gravel reset"
	
command /mine <integer> [<player=%player%>]:
	description: set the percent (from 0 to 100) of the mining of gravel
	permission: feu.mine.commands
	trigger:
		if arg-1 is less than 0:
			message "<red>I'm afraid I cannot go that low"
		else if arg-1 is greater than 100:
			message "<red>IT'S OVER 9000(-8900). too high!"
		else:
			set {feu.chance.stone.%arg-2%} to arg-1
			message "<green>%arg-2%'s chance at mining stone from gravel is now:<gold> %arg-1%"
			
options:
	#easier to edit, also taking up less space
	blocks: spruce wood, air, coal ore, iron ore or diamond ore
	corruptBlocks: stone, spruce wood, coal ore, iron ore, diamond ore or air
	
		
command /fix <item>:
	permission: feu.fix
	usage: /fix <{@blocks}>
	trigger:
		if arg-1 is {@blocks}:
		#check if the block is correct
			if the block below the player is {@corruptBlocks}:
			#check is the player is standing upon a "corruptBlock"
				set the block below the player to arg-1
			else:
				Message "<red>Cannot fix the block below you!"
				Message "<gold>Valid block to stand on:<red> {@corruptBlocks}"
				#say what's wrong
		else:
			Message "<red>That's not an allowed block to fix!"
			Message "<gold>valid choices: <red>{@blocks}"

on physics:
	block is gravel
	cancel event
	#prevent gravel from falling (doesn't work when placed or spawned (see on mine: gravel"))