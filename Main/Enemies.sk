options:
	debug: false
	hardDebugging: false #Do not set to true unless you want spam in the console
	
	prefix: <gold>[&aFeudalism<gold>]<r>
	debugPrefix: <gold>[<yellow>Debug<gold>]<r>
	
	warn: <gold>[&aFeudalism<gold>] <yellow>WARNING:<light red>
	err: <gold>[&aFeudalism<gold>] <red>ERROR:<light red>
	
#Commands	
command /spawnCostumsZombies <integer> <text="Zombie"> [<text="default">] [<text="default">]:
	usage: scz <level> <name (use '_' for space)> [<leather|chain|iron|gold|diamond|none>]  [<wooden|stone|iron|gold|diamond|none>]#arg-2 is what type of armour should be equipped AND arg-3 is weapon type
	aliases: scz
	trigger:
		if "%name of player%" is "<none>":
			set {_console} to true
		if {_console} is true:
			message "" to player
		else if {feu.permission.%name of player%} isn't "feu.mod", "feu.tech", "feu.admin" or "op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%name of player%} doesn't exist:
			message "{@err} Permission error!"
			set {feu.permission.%name of player%} to "feu.player"
			stop
			
		#General
		spawn a zombie north of the player
		set metadata value "ID" of last spawned entity to "SCZ"
		set metadata value "Level" of last spawned entity to "%arg-1%"
		wait 1 tick
		set age of event-entity to adult
		set {_name} to arg-2
		replace all "_" with " " in {_name} 
		set the name of last spawned entity to "%{_name}%"
		set metadata value "Level" of last spawned entity to arg-1
		#Armour
		
		if arg-3 is "leather":
			equip last spawned entity with all leather armour
		else if arg-3 is "chain":
			equip last spawned entity with all chain armour
		else if arg-3 is "iron":
			equip last spawned entity with all iron armour
		else if arg-3 is "gold":
			equip last spawned entity with all gold armour	
		else if arg-3 is "diamond":
			equip last spawned entity with all diamond armour
		else if arg-3 is "none", "air" or "default":
			set helmet slot of last spawned entity to air
			set chestplate slot of last spawned entity to air
			set legging slot of last spawned entity to air
			set boots slot of last spawned entity to air
			if arg-3 is "default":
				message "{@warn} The entity is spawned with no armour!"
		else:
			message "{@err} Argument 3 (armour) is wrong!"
			delete last spawned entity			
			stop
		#Weapon	
			
		if arg-4 is "wooden":
			set tool of the last spawned entity to a wooden sword
		else if arg-4 is "stone":
			set tool of the last spawned entity to a stone sword	
		else if arg-4 is "iron":
			set tool of the last spawned entity to a iron sword	
		else if arg-4 is "gold":
			set tool of the last spawned entity to a gold sword
		else if arg-4 is "diamond":
			set tool of the last spawned entity to a diamond sword
		else if arg-4 is "none", "air" or "default":
			set tool of the last spawned entity to air
			if arg-4 is "default":
				message "{@warn} The entity is spawned with no arms!"
		else:
			message "{@err} Argument 4 (arms) is wrong!"
			delete last spawned entity			
			stop	
			
		#Health	
		set {_arg} to arg-1
		set {_health} to 20+{_arg}^1.5
		{@debug} is true:
			message "{@debugPrefix} Health of ""%arg-2%"" is <light green>%{_health}%"
		set the maximum health of the last spawned entity to {_health}
		set health of the last spawned entity to {_health}	
		
command /setFixedZombieSpawn <integer> <text> <text> [<integer=4>]:# [<integer=0.2>]:
	usage: /sfzs <level> <Armour> <weapon> [<return to spawn distance>] #[<speed (from -1 to 1>]
	aliases: sfzs
	trigger:
		if "%name of player%" is "<none>":
			set {_console} to true
		if {_console} is true:
			message "" to player
		else if {feu.permission.%name of player%} isn't "feu.tech", "feu.admin" or "op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%name of player%} doesn't exist:
			message "{@err} Permission error!"
			set {feu.permission.%name of player%} to "feu.player"
			stop
			
		if block below player is air:
			message "{@err} Cannot spawn zombies in air!"
			stop
		if arg-1 is less than 0:
			message "{@err} You cannot set the level to less than 1."
			stop
		else if arg-1 is greater than 1000:
			message "{@err} An entity cannot be higher than level 1000!"
			stop
			
		if arg-2 isn't "leather", "chain", "iron", "gold", "diamond", "none" or "air":
			message "{@err} An entity cannot equip that type of armour!"
			stop
			
		if arg-3 isn't "wood", "wooden", "stone", "iron", "gold", "diamond", "air" or "none":
			message "{@err} An entity cannot hold that kind of weapon!"
			stop
		if arg-4 is less than 1:
			message "{@err} You cannot set that to negative or zero."
			stop
		set {_round Coords} to location of player
		set {_x} to x coordinate of {_round Coords}
		set {_y} to y coordinate of {_round Coords}
		set {_z} to z coordinate of {_round Coords}
		set x coordinate of {_round Coords} to floor({_x})+0.5
		set y coordinate of {_round Coords} to floor({_y})+0.5
		set z coordinate of {_round Coords} to floor({_z})+0.5
		if "%{feu.fixedspawn.isSpawned.%{feu.fixedspawn.ID.%{_round Coords}%}%}%" isn't "<none>":
			message "{@err} A spawn point already exists here!"
			stop 
		add {_round Coords} to {feu.fixedspawn::*}
		set block below player to iron block
		
		set {feu.fixedspawn.lvl.%{_round Coords}%} to arg-1
		set {feu.fixedspawn.armour.%{_round Coords}%} to arg-2
		set {feu.fixedspawn.weapon.%{_round Coords}%} to arg-3
		set {feu.returnToSpawn.%{_round Coords}%} to arg-4
		
		add 1 to {feu.fixedspawnID}
		set {feu.fixedspawn.ID.%{_round Coords}%} to {feu.fixedspawnID}
		set {feu.fixedspawn.isSpawned.%{feu.fixedspawn.ID.%{_round Coords}%}%} to false
		message "{@prefix} A LvL &a%arg-1%<r> (ID: &a%{feu.fixedspawn.ID.%{_round Coords}%}%<r>) zombie with <gold>%arg-2% armour<r> and <gold>%arg-3% sword<r> will spawn here!"
		
command /removeAllFixedSpawns:
	aliases: rafs
	executable by: console
	trigger:		
		loop {feu.fixedspawn::*}:
			delete {feu.fixedspawn.lvl.%loop-value%}
			delete {feu.fixedspawn.armour.%loop-value%}
			delete {feu.fixedspawn.weapon.%loop-value%}
			delete {feu.fixedspawn.ID.%loop-value%}
			delete {feu.fixedspawn.isSpawned.%loop-value%}
			delete {feu.returnToSpawn.%loop-value%}			
		delete {feu.fixedspawn::*}
		delete {feu.fixedspawnID}
		
		execute console command "killall"
		
		message "{@prefix} Removed all fixed spawn points!"
		
command /removeFixedSpawn:	
	aliases: rfs
	trigger:
		if "%name of player%" is "<none>":
			#Not a console command
			stop
		else if {feu.permission.%name of player%} isn't "feu.tech", "feu.admin" or "op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%name of player%} doesn't exist:
			message "{@err} Permission error!"
			set {feu.permission.%name of player%} to "feu.player"
			stop
			
		set {_round Coords} to location of player
		set {_x} to x coordinate of {_round Coords}
		set {_y} to y coordinate of {_round Coords}
		set {_z} to z coordinate of {_round Coords}
		set x coordinate of {_round Coords} to floor({_x})+0.5
		set y coordinate of {_round Coords} to floor({_y})+0.5
		set z coordinate of {_round Coords} to floor({_z})+0.5
		
		if {feu.returnToSpawn.%{_round Coords}%} exists:
			
			delete {feu.fixedspawn.lvl.%{_round Coords}%}
			delete {feu.fixedspawn.armour.%{_round Coords}%}
			delete {feu.fixedspawn.weapon.%{_round Coords}%}
			delete {feu.fixedspawn.ID.%{_round Coords}%}
			delete {feu.fixedspawn.isSpawned.%{_round Coords}%}				
			delete {feu.returnToSpawn.%{_round Coords}%}	
			
			remove {_round Coords} from {feu.fixedspawn::*}
			message "done!"
			block below player is iron block
			set block below player to grass
		else:
			message "{@err} No fixed spawn here!"

command /fixAllZombieSpawns:
	usage: fazs
	aliases: fazs
	trigger:
		if "%name of player%" is "<none>":
			set {_console} to true
		if {_console} is true:
			message "" to player
		else if {feu.permission.%name of player%} isn't "feu.admin" or "op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%name of player%} doesn't exist:
			message "{@err} Permission error!"
			set {feu.permission.%name of player%} to "feu.player"
			stop
			
		clear {_nr}
		loop {feu.fixedspawnID} times:
			add 1 to {_nr}
			set {feu.fixedspawn.isSpawned.%{_nr}%} to false
		message "{@prefix} All custom spawned entities will now spawn!"
			
			
command /fixZombieSpawns <integer>:
	usage: fzs <ID>
	aliases: fzs
	trigger:
		if "%name of player%" is "<none>":
			set {_console} to true
		if {_console} is true:
			message "" to player
		else if {feu.permission.%name of player%} isn't "feu.mod", "feu.tech", "feu.admin" or "op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%name of player%} doesn't exist:
			message "{@err} Permission error!"
			set {feu.permission.%name of player%} to "feu.player"
			stop
			
		if {feu.fixedspawn.isSpawned.%arg-1%} exists:
			set {feu.fixedspawn.isSpawned.%arg-1%} to false
			message "{@prefix} Fixed the entity spawning below you!"
		else:
			message "{@err} No variable here!"
			
command /targetInfo:
	executable by: player
	trigger:
		if {feu.permission.%name of player%} isn't "feu.mod", "feu.tech", "feu.admin" or "op":
			message "{@err} You do not have permission for this command!"
			stop
		else if {feu.permission.%name of player%} doesn't exist:
			message "{@err} Permission error!"
			set {feu.permission.%name of player%} to "feu.player"
			stop
			
		if player's target is an entity:
			if name of target entity doesn't exist:	
				message "{@err} No ID or Level on this entity!"
				stop
			set {_victim level} to metadata value "Level" of target entity
			set {_Victim ID} to metadata value "ID" of target entity
			set {_Victim loc} to metadata value "Home" of target entity
			if target is a villager:
				message "{@warn} Target is a villager, they have not info"
				stop
			else if {_victim level} doesn't exist:
				message "{@warn} Not a custom spawned/corrupt entity or a player!"
				stop
			message "{@prefix} Level: %{_victim level}%"
			message "{@prefix} ID: %{_victim ID}%"
			message "{@prefix} Loc: %{_victim loc}%"
		else:
			message "{@err} No entity targeted"
			stop
#Events

every 5 second in world "Feudalism_4":	
	{@debug} is true:
		set {_1stTime} to now
		{@hardDebugging} is false:
			message "{@debugPrefix} Running 5 second test" to console
	if {feu.disable.enemies} is true:
		stop
	loop all entities in world "Feudalism_4":
		loop-entity is a zombie
		{@hardDebugging} is true:
			message "{@debugPrefix} %{_ID}% | loop-entity-2 is a zombie" to console
		set {_ID} to metadata value "ID" of loop-entity
		if "%{_ID}%" is "SCZ":
			stop loop
		set {_location} to {feu.quest.zombies.random}
		set {_x} to metadata value "X" of loop-entity 
		set {_y} to metadata value "Y" of loop-entity 
		set {_z} to metadata value "Z" of loop-entity
		set x coordinate of {_location} to ({_x}) parsed as number
		set y coordinate of {_location} to ({_y}) parsed as number
		set z coordinate of {_location} to ({_z}) parsed as number

		if "%{_ID}%" isn't "<none>":
			#needs optimizing
			{@hardDebugging} is true:
				message "{@debugPrefix} %{_ID}% | selected the right zombie" to console
			if distance between loop-entity and {_location} is greater than 14:
				teleport loop-entity to {_location}
				set {feu.fixedspawn.isSpawned.%{_ID}%} to false
				{@debug} is true:
					message "{@debugPrefix} %{_ID}% |<red> Way too far home! deleting entity" to console

			if {feu.running.%{feu.fixedspawn.ID.%{_location}%}%} is true:
				if distance between loop-entity and {_location} is smaller than {feu.returnToSpawn.%{_location}%}:
					set {feu.running.%{feu.fixedspawn.ID.%{_location}%}%} to false
					{@debug} is true:
						message "{@debugPrefix} %{_ID}% | <green>entity is now home" to console
				else:
					make loop-entity pathfind to {_location} with speed 1.5
					{@debug} is true:
						message "{@debugPrefix} %{_ID}% | <yellow>Still walking home... " to console
				#stop loop
					
			else if loop-entity's target is a player:
				distance between loop-entity and {_location} is greater than {feu.fixedspawn.ID.%{_location}%}
				make loop-entity pathfind to {_location} with speed 1
				set {feu.running.%{feu.fixedspawn.ID.%{_location}%}%} to true
				{@debug} is true:
					message "{@debugPrefix} %{_ID}% | <purple> breaking off pursuit of player" to console
				#stop
			else if distance between loop-entity and {_location} is greater than {feu.returnToSpawn.%{_location}%}:
				make loop-entity pathfind to {_location} with speed 1
				set {feu.running.%{feu.fixedspawn.ID.%{_location}%}%} to true
				{@debug} is true:
					message "{@debugPrefix} %{_ID}% | <yellow>too far from home, running home" to console
			else:
				{@hardDebugging} is true:
					message "{@debugPrefix} <green>Nothing to report on %{_ID}%" to console
	{@debug} is true:
		set {_time} to difference between {_1stTime} and now
		message "short periodical event took %{_time}%" to console		
	
every 20 second in world "Feudalism_4":
	#stop
	{@debug} is true:
		set {_1stTime} to now
	if {feu.disable.enemies} is true:
		message "{@warn} Zombie Spawning disabled!" to console
		stop
	{@debug} is true:
		{@hardDebugging} is false:
			message "{@debugPrefix} Running 30 second test" to console
	loop {feu.fixedspawn::*}:
		{@hardDebugging} is true:
			message "{@debugPrefix} %loop-index-1% | test 1 | %loop-value%" to console
		spawn a witch 3 below loop-value
		delete last spawned entity
		set {_players} to 0
		set {_location} to loop-value-1
		loop players in radius 15 around last spawned entity:
			add 1 to {_players}
			{@debug} is true:
				message "{@debugPrefix} %loop-index-1% | player(s) found | players: %{_players}%" to console	
			if {_players} is greater than 0:
				if {feu.fixedspawn.isSpawned.%{feu.fixedspawn.ID.%loop-value-1%}%} is false:
					{@debug} is true:
						message "{@debugPrefix} %loop-index-1% | Spawning a zombie" to console
					spawn a zombie at loop-value-1
					set {feu.fixedspawn.isSpawned.%{feu.fixedspawn.ID.%loop-value-1%}%} to true
					wait 2 ticks
					set age of last spawned entity to adult
					set the name of last spawned entity to "LvL %{feu.fixedspawn.lvl.%loop-value-1%}% Zombie"	
					
					set metadata value "ID" of last spawned entity to "%{feu.fixedspawn.ID.%loop-value-1%}%"
					set metadata value "Level" of last spawned entity to "%{feu.fixedspawn.lvl.%loop-value-1%}%"
					set metadata value "X" of last spawned entity to "%x-coordinate of loop-value-1%"				
					set metadata value "Y" of last spawned entity to "%y-coordinate of loop-value-1%"	
					set metadata value "Z" of last spawned entity to "%z-coordinate of loop-value-1%"	
					if {feu.fixedspawn.armour.%loop-value-1%} is "leather":
						equip last spawned entity with all leather armour			
					else if {feu.fixedspawn.armour.%loop-value-1%} is "chain":
						equip last spawned entity with all chain armour
					else if {feu.fixedspawn.armour.%loop-value-1%} is "iron":
						equip last spawned entity with all iron armour
					else if {feu.fixedspawn.armour.%loop-value-1%} is "gold":
						equip last spawned entity with all gold armour	
					else if {feu.fixedspawn.armour.%loop-value-1%} is "diamond":
						equip last spawned entity with all diamond armour
					else if {feu.fixedspawn.armour.%loop-value-1%} is "none" or "air":
						set the helmet of the last spawned entity to air
						set the chestplate of the last spawned entity to air
						set the leggings of the last spawned entity to air
						set the boots of the last spawned entity to air
					else:
						message "{@err} An error was retuned from auto spawn at %loop-value-1%: <yellow>Wrong argument! <light red>The entity is spawned with no armour! " to console
			
					#Weapon	
			
					if {feu.fixedspawn.weapon.%loop-value-1%} is "wooden" or "wood":
						set tool of the last spawned entity to a wooden sword
					else if {feu.fixedspawn.weapon.%loop-value-1%} is "stone":
						set tool of the last spawned entity to a stone sword	
					else if {feu.fixedspawn.weapon.%loop-value-1%} is "iron":
						set tool of the last spawned entity to a iron sword	
					else if {feu.fixedspawn.weapon.%loop-value-1%} is "gold":
						set tool of the last spawned entity to a gold sword
					else if {feu.fixedspawn.weapon.%loop-value-1%} is "diamond":
						set tool of the last spawned entity to a diamond sword
					else if {feu.fixedspawn.weapon.%loop-value-1%} is "none" or "air":
						set tool of the last spawned entity to air
					else:
						message "{@err} An error was retuned from auto spawn at %loop-value-1%: <red>Wrong argument! <light red>The entity is spawned with no arms!" to console
					wait 2 tick
					set {_health} to floor((16.09*{feu.fixedspawn.lvl.%loop-value-1%}^0.38)/2)
					set the maximum health of the last spawned entity to {_health}
					set health of the last spawned entity to {_health}					
				else:
					{@debug} is true:
						loop entities in radius 15 around last spawned entity:
							set {_ID} to metadata value "ID" of loop-entity-2
							if "%{_ID}%" is equal to "%{feu.fixedspawn.ID.%loop-value-1%}%":
								if distance between loop-entity-2 and loop-value-1 is greater than {feu.returnToSpawn.%{_round Coords}%}:
									message "{@debugPrefix} %loop-index-1% | Making zombie run to its spawn" to console	
								else:
									message "{@debugPrefix} %loop-index-1% | A zombie is already spawned" to console											
		if {_players} is 0:
			loop entities in radius 15 around last spawned entity:
				if {feu.fixedspawn.isSpawned.%{feu.fixedspawn.ID.%{_location}%}%} is true:
					set {_ID} to metadata value "ID" of loop-entity
					if "%{_ID}%" is "%{feu.fixedspawn.ID.%{_location}%}%":
						wait a tick
						delete loop-entity
						set {feu.fixedspawn.isSpawned.%{feu.fixedspawn.ID.%{_location}%}%} to false
						{@debug} is true:
							message "{@debugPrefix} %{_ID}% | No player in sight! Killing zombie." to console
	{@debug} is true:	
		set {_time} to difference between {_1stTime} and now
		message "long periodical event took %{_time}%" to console	